d <- matrix(0, 4, 4)
d
d[1, 1] <- 5
d
d[1, 2] <- d[2, 1] <- 10
d
1:4
sapply&
sapply?
Q <- matrix(0, 4, 4)
Q <- matrix(0, 4, 4)
Q[1, 2] <- Q[2, 1] <- 5
rowSums(Q)
diag(Q) <- -rowSums(Q)
Q
tests_dir <- "C:\Users\kam\Documents\Katya\R\L2\Homework2\student_test_suite-4"
tests_dir <- \U"C:\Users\kam\Documents\Katya\R\L2\Homework2\student_test_suite-4"
tests_dir <- "C:/Users/kam/Documents/Katya/R/L2/Homework2/student_test_suite-4"
if(tests_dir == "path/to/tests") stop("tests_dir needs to be set to a proper path")
library("RUnit")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
tests_dir <- "C:/Users/kam/Documents/Katya/R/L2/Homework2/student_test_suite-4"
if(tests_dir == "path/to/tests") stop("tests_dir needs to be set to a proper path")
library("RUnit")
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceAlignment_skeleton.r")
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
out <- runTestSuite(testsuite)
printTextProtocol(out)
#########################################################
#######        COMPUTATIONAL BIOLOGY         ############
#######             HOMEWORK 2               ############
#########################################################
#                                                       #
# Simulate the evolution of sequences on a fixed tree   #
# under the TN93 sequence evolution model               #
#                                                       #
#########################################################
#########################################################
#########################################################
######    Code below this should not be changed   #######
#########################################################
library(Matrix)
library(ape)
install.packages("ape")
#########################################################
#######        COMPUTATIONAL BIOLOGY         ############
#######             HOMEWORK 2               ############
#########################################################
#                                                       #
# Simulate the evolution of sequences on a fixed tree   #
# under the TN93 sequence evolution model               #
#                                                       #
#########################################################
#########################################################
#########################################################
######    Code below this should not be changed   #######
#########################################################
library(Matrix)
library(ape)
nucleotides = c("T", "C", "A", "G")
get_nucleotide_from_number = function(i) {
# Transform a nucleotide number into the appropriate letter
# i: (integer) nucleotide number
return(nucleotides[i])
}
transform_to_nucleotides = function(sequence) {
# Transform a sequence of nucleotide numbers into the appropriate character sequence
# sequence: (integers) sequence of nucleotide numbers
nucl_sequence = paste0(lapply(sequence, get_nucleotide_from_number), collapse = "")
return(nucl_sequence)
}
#########################################################
######    Code above this should not be changed   #######
#########################################################
# In all functions the following parameters are the same:
# pi: (double) the stationary frequencies of nucleotides
# alpha1: (double) rate coefficient for the C <-> T transition
# alpha2: (double) rate coefficient for the A <-> G transition
# beta: (double) rate coefficient for transversions
# N: number of sites in the simulated alignment
create_TN93_Q_matrix = function(pi, alpha1, alpha2, beta) {
# Create the TN93 transition rate matrix Q as specified in the assignment.
Q <- matrix(0, 4, 4)
Q[1, 2] <- Q[2, 1] <- alpha1 * pi
Q[1, 3] <- Q[1, 4] <- Q[3, 1] <- Q[4, 1] <- Q[2, 3] <- Q[2, 4] <- Q[3, 2] <- Q[4, 2] <- beta * pi
Q[3, 4] <- Q[4, 3] <- alpha2 * pi
diag(Q) <- -rowSums(Q)
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates (double)
return(Q)
}
get_starting_nucleotide = function(pi) {
# Sample a starting nucleotide from the stationary distribution
# ???
# Return the sampled nucleotide
# nucleotide: integer nucleotide value
return(nucleotide)
}
get_starting_sequence = function(pi, N) {
# Sample a starting sequence of length N
# ???
# Return the sampled sequence
# starting_sequence: vector of integer nucleotide values
return(starting_sequence)
}
get_evolved_sequence = function(sequence, branch_length, Q) {
# Evolve a given nucleotide sequence along a branch of specified length.
# sequence: (integer) nucleotide sequence at the beginning of the branch
# branch_length: (double) the length of the branch along which evolution happens
# Q: (double) the transition rate matrix
# ???
# Return the nucleotide sequence after all positions have evolved along the given branch.
# evolved_sequence: the vector of new integer nucleotide values at the end of the branch
return(evolved_sequence)
}
simulate_evolution = function(newick_tree, pi, alpha1, alpha2, beta, N) {
# Simulate evolution along the given tree.
# newick_tree: the tree in newick text format
# Transfrom the tree from text format to an object of the phylo class which represents
# the tree in R
tree = read.tree(text = newick_tree)
# Reorder the tree for easier traversing
tree = reorder(tree, order = "cladewise")
# Set up the Q matrix
# ???
# Set up the starting sequence @ the root of the tree
# ???
# Prepare a list to store evolved sequences at each node
sequence_per_node = list()
sequence_per_node[[tree$edge[1,1]]] = starting_sequence
# Walk the tree while evolving sequences along appropriate branches
for (i in 1:length(tree$edge.length)) {
node_parent = tree$edge[i, 1]
node_child = tree$edge[i, 2]
branch_length = tree$edge.length[i]
parent_sequence = sequence_per_node[[node_parent]]
# ???
sequence_per_node[[node_child]] = child_sequence
}
# Transform the alignment from nucleotide indices to nucleotide characters
# and filter out the sequences at the tips
alignment = list()
for (i in 1:length(tree$tip.label)) {
alignment[[tree$tip.label[i]]] = transform_to_nucleotides(sequence_per_node[[i]])
}
# Return the simulated alignment.
# The alignment should be in the form of a list where the tip label corresponds to the
# appropriate simulated sequence, e.g. alignment$human = ACTG
return(alignment)
}
test_simulation = function() {
library(ape)
newick_tree = "(orangutan:13,(gorilla:10.25,(human:5.5,chimp:5.5):4.75):2.75);"
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
result = simulate_evolution(newick_tree, pi, alpha1, alpha2, beta, N)
print(result$orangutan)
print(result$gorilla)
print(result$human)
print(result$chimp)
result
}
test_simulation()
create_TN93_Q_matrix(3, 2, 4, 2)
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
library("RUnit")
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
load("test_matrices_prov.RData")
pi = c(0.22, 0.26, 0.33, 0.19)
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
matrix = create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
matrix
TN93_Qfull
matrix
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
load("test_matrices_prov.RData")
pi = c(0.22, 0.26, 0.33, 0.19)
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
matrix = create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
matrix
TN93_Qfull
Q <- transpose(Q)
load("test_matrices_prov.RData")
pi = c(0.22, 0.26, 0.33, 0.19)
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
matrix = create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
matrix
load("test_matrices_prov.RData")
pi = c(0.22, 0.26, 0.33, 0.19)
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
matrix = create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
create_TN93_Q_matrix = function(pi, alpha1, alpha2, beta) {
# Create the TN93 transition rate matrix Q as specified in the assignment.
Q <- matrix(0, 4, 4)
Q[1, 2] <- Q[2, 1] <- alpha1
Q[1, 3] <- Q[1, 4] <- Q[3, 1] <- Q[4, 1] <- Q[2, 3] <- Q[2, 4] <- Q[3, 2] <- Q[4, 2] <- beta
Q[3, 4] <- Q[4, 3] <- alpha2
Q <- Q * pi
print(Q)
Q <- transpose(Q)
print(Q)
diag(Q) <- -rowSums(Q)
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates (double)
return(Q)
}
load("test_matrices_prov.RData")
pi = c(0.22, 0.26, 0.33, 0.19)
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
matrix = create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
create_TN93_Q_matrix = function(pi, alpha1, alpha2, beta) {
# Create the TN93 transition rate matrix Q as specified in the assignment.
Q <- matrix(0, 4, 4)
Q[1, 2] <- Q[2, 1] <- alpha1
Q[1, 3] <- Q[1, 4] <- Q[3, 1] <- Q[4, 1] <- Q[2, 3] <- Q[2, 4] <- Q[3, 2] <- Q[4, 2] <- beta
Q[3, 4] <- Q[4, 3] <- alpha2
Q <- Q * pi
print(Q)
Q <- t(Q)
print(Q)
diag(Q) <- -rowSums(Q)
# Return the transition rate matrix
# Q: 4 by 4 matrix of rates (double)
return(Q)
}
load("test_matrices_prov.RData")
pi = c(0.22, 0.26, 0.33, 0.19)
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
matrix = create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
tests_dir <- "C:/Users/kam/Documents/Katya/R/L2/Homework2/student_test_suite-4"
if(tests_dir == "path/to/tests") stop("tests_dir needs to be set to a proper path")
library("RUnit")
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
setwd(currentdir)
pi = c(0.22, 0.26, 0.33, 0.19)
seq = get_starting_sequence(pi, 100000)
pi = c(0.22, 0.26, 0.33, 0.19)
seq = get_starting_sequence(pi, 100000)
get_starting_sequence = function(pi, N) {
# Sample a starting sequence of length N
starting_sequence <- sample(1:4, size = N, prob = pi, replace = FALSE)
# Return the sampled sequence
# starting_sequence: vector of integer nucleotide values
return(starting_sequence)
}
pi = c(0.22, 0.26, 0.33, 0.19)
seq = get_starting_sequence(pi, 100000)
get_starting_sequence = function(pi, N) {
# Sample a starting sequence of length N
starting_sequence <- sample(1:4, size = N, prob = pi, replace = TRUE)
# Return the sampled sequence
# starting_sequence: vector of integer nucleotide values
return(starting_sequence)
}
pi = c(0.22, 0.26, 0.33, 0.19)
seq = get_starting_sequence(pi, 100000)
checkEquals(100000, length(seq), "Wrong length for starting sequence")
checkEquals(pi[1], sum(seq == 1)/100000, msg = "Wrong proportion of nucleotide 1", tolerance = 2e-2)
checkEquals(pi[2], sum(seq == 2)/100000, msg = "Wrong proportion of nucleotide 2", tolerance = 2e-2)
checkEquals(pi[3], sum(seq == 3)/100000, msg = "Wrong proportion of nucleotide 3", tolerance = 2e-2)
checkEquals(pi[4], sum(seq == 4)/100000, msg = "Wrong proportion of nucleotide 4", tolerance = 2e-2)
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
library(ape)
newick_tree = "(orangutan:13,(gorilla:10.25,(human:5.5,chimp:5.5):4.75):2.75);"
N = 40
beta = 0.035
alpha1 = 0.044229
alpha2 = 0.021781
pi = c(0.22, 0.26, 0.33, 0.19)
tree = read.tree(text = newick_tree)
# Reorder the tree for easier traversing
tree = reorder(tree, order = "cladewise")
# Set up the Q matrix
Q <- create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
# Set up the starting sequence @ the root of the tree
sequence <- get_starting_sequence(pi, N)
# Prepare a list to store evolved sequences at each node
sequence_per_node = list()
sequence_per_node[[tree$edge[1,1]]] = starting_sequence
tree
tree$edge
tree$edge.length
load("test_matrices_prov.RData")
cat("\n(This test can take up to a minute or so. Please be patient!)\n")
rep(1, 100000)
TN93_Qfull
branch_length = 6, Q = TN93_Qfull
branch_length = 6Q = TN93_Qfull
branch_length = 6
Q = TN93_Qfull
Q
P <- expm(branch_length * Q)
P
P[1, ]
sample(1:4, size = 1, prob = P[1, ])
sample(1:4, size = 1, prob = P[1, ])
s <- rep(1, 100000)
evolved_sequence <- lapply(s, x <- function(x) sample(1:4, size = 1, prob = P[x, ]))
evolved_sequence
k <- list(evolved_sequence )
k
k <- unlist(evolved_sequence )
k
checkEquals(100000, length(k), "Wrong length of evolved sequence")
testseq <- k
checkEquals(0.22, sum(testseq == 1)/100000, msg = "Wrong proportion of nucleotide 1", tolerance = 4e-2)
checkEquals(0.26, sum(testseq == 2)/100000, msg = "Wrong proportion of nucleotide 2", tolerance = 4e-2)
checkEquals(0.33, sum(testseq == 3)/100000, msg = "Wrong proportion of nucleotide 3", tolerance = 4e-2)
checkEquals(0.19, sum(testseq == 4)/100000, msg = "Wrong proportion of nucleotide 4", tolerance = 4e-2)
library("RUnit")
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
newick_tree = "(orangutan:13,(gorilla:10.25,(human:5.5,chimp:5.5):4.75):2.75);"
N = 100
alpha1 = 450/8.406; alpha2 = 220/8.406; beta = 10/8.406
pi = c(0.22, 0.26, 0.33, 0.19)
result = simulate_evolution(newick_tree, pi, alpha1, alpha2, beta, N)
result
length(result)
checkEquals(4, length(result), "Wrong number of sequences in final result")
checkEquals(N, nchar(result[[1]])
)
nchar(result[[1]]
)
tree = read.tree(text = newick_tree)
# Reorder the tree for easier traversing
tree = reorder(tree, order = "cladewise")
# Set up the Q matrix
Q <- create_TN93_Q_matrix(pi, alpha1, alpha2, beta)
# Set up the starting sequence @ the root of the tree
starting_sequence <- get_starting_sequence(pi, N)
# Prepare a list to store evolved sequences at each node
sequence_per_node = list()
sequence_per_node[[tree$edge[1,1]]] = starting_sequence
sequence_per_node
length(tree$edge.length)
i <- 1
node_parent = tree$edge[i, 1]
node_child = tree$edge[i, 2]
branch_length = tree$edge.length[i]
parent_sequence = sequence_per_node[[node_parent]]
sequence
length(sequence)
parent_sequence
length(parent_sequence)
library("RUnit")
source("C:/Users/kam/Documents/Katya/R/L2/Homework2/CB_HW2_SequenceSimulation_skeleton.r")
testsuite <- defineTestSuite("HW", tests_dir)
currentdir <- getwd()
setwd(tests_dir)
out <- runTestSuite(testsuite)
printTextProtocol(out)
