DF
DF
i
input$selectedNode[1]
Matrixes[[3]]
DF
Matrixes[[3]]
Matrixes[[3]]
Matrixes[[3]]
DF
Matrixes[[3]]
DF
DF
input$selectedNode[1]
Matrixes[[3]]
DF
DF
tmp
runApp()
runApp()
tmp
length(tmp)
tmp[[1]]
DF
tmp[,1]
tmp[1,]
tmp[[]][1,]
tmp[[]][,1]
tmp[[]][1]
runApp()
runApp()
runApp()
DF
DF
tmp
tmp[[1]]
runApp()
Matrixes[[3]]
Matrixes[[3]]
tmp
DF
tmp
DF
runApp()
runApp()
tmp
tmp
Matrixes[[3]]
datatable(Matrixes[[input$selectedNode[1]]])
runApp()
runApp()
runApp()
tmp
tmp
DF
DF
DF
DF
tmp
tmp[[1]]
tmp[[1]][[1]]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
v
v
sapply(v,function(x) v/x)
Matrix
k<-sapply(v,function(x) v/x)
k*Matrix
m<-k*Matrix
m
power(2)
power(2,2)
m
log(m)
log(m)**2
m
log(m)*log(m)
m<-log(m)**2
m
sum(m)
m[1,j>1]
m[1,>1]
m[1,:1]
m[1,]
m[2,1:2]
m[2,1:1]
m[3:1:2]
m[3,1:2]
sapply(1:length(m) function(x) m[x,1:(x-1)])
sapply(1:length(m), function(x) m[x,1:(x-1)])
sapply(2:length(m), function(x) m[x,1:(x-1)])
m[2,1:1]
m[3,1:2]
sapply(2:dim(m)[1], function(x) m[x,1:(x-1)])
p<-sapply(2:dim(m)[1], function(x) m[x,1:(x-1)])
sum(p)
p[[1]]+p[[2]]
unlist(p)
m
n<-3
p<-sapply(2:dim(m)[1], function(x) m[x,1:(x-1)])
s<-sum(unlist(p))
runApp()
runApp()
runApp()
runApp()
n<-3
norm<-c(0.1573,0.3526,0.37)
dim<-c(3,4,5)
which(dim==n)
norm
norm[1]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
m
dim(m)
runApp()
m
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
w
start
end
m
runApp()
runApp()
runApp()
m
runApp()
m<-Matrixes[1:2]
m
sapply(m,function(x) matrixToNumeric(x))
apply(m,function(x) matrixToNumeric(x))
lapply(m,function(x) matrixToNumeric(x))
runApp()
m
runApp()
rgmm
max(rgmm)
lapply(rgmm,function(x) max(x))
runApp()
runApp()
max
rgmm/max
sapply(1:length(max), function(x) rgmm[[x]]/max[[x]])
lapply(1:length(max), function(x) rgmm[[x]]/max[[x]])
v<-lapply(1:length(max), function(x) rgmm[[x]]/max[[x]])
v
w
v*w
v[[2]]<-c(1,2,3)
v
w<-c(1,5)
v[[1]]*w[1]
lapply(1:length(w), function(x) v[[x]]*w[[x]])
apply(1:length(w), function(x) v[[x]]*w[[x]])
sapply(1:length(w), function(x) v[[x]]*w[[x]])
k<-sapply(1:length(w), function(x) v[[x]]*w[[x]])
lapply(k,2,sum)
apply(k,2,sum)
apply(k,1,sum)
w0<-apply(k,1,sum)
w0<-w0/max(w0)
w0
runApp()
m
rgmm
v
runApp()
k
w0
wAll
w
m
rgmm
max
v
k
w0
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
fileContent
as.matrix(fileContent)
matrix(fileContent)
t(fileContent)
as.matrix(t(fileContent))
runApp()
fileContent
t(fileContent)
read.ftable(v[i], header=FALSE,sep="\t")
read.ftable(v[i], sep="\t")
read.table(v[i], header=FALSE,sep="\t")
read.cv2(v[i], header=FALSE,sep="\t")
read.csv2(v[i], header=FALSE,sep="\t")
m<-read.csv2(v[i], header=FALSE,sep="\t")
t(m)
as.matrix(t(m))
as.data.frame(t(m))
k<-as.data.frame(t(m))
as.matrix(k)
k[1,1]
k[1,]
m
nmaes(m)<-NULL
names(m)<-NULL
m
t(m)
m<-read.table(v[i], header=FALSE,sep="\t")
m
runApp()
runApp()
runApp()
w0<-c(1)
w0
w<-c(w0,c(2,3))
w
w[2]<-c(2,3)
w<-list()
w[1]<-w0
w
w[2]<-c(2,3)
w.add(c(2,3))
w[[2]]<-c(2,3)
w
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
w0
w
w[[3]]<-c(2,4,5)
w
renderText(w)
unlist(w)
runApp()
runApp()
runApp()
v<-c(1,5,7,9)
wAll
wAll[;4]
wAll[:4]
wAll[4]
wAll[,4]
wAll[1:2]
m<-7
wAll[m:length(wAll)]
wAll
wAll[(m+1):length(wAll)]
w<-wAll[(m+1):length(wAll)]
w
names(w)<-c("8","9","10","1")
w
names(w)<-8:11
w
w
max(8)
max(w)
sort(w)
rev(w)
DataFile
runApp()
runApp()
w
as.table(w)
as.data.frame(w)
runApp()
runApp()
w
w<-wAll[(N+1):length(wAll)]
N<-7
w<-wAll[(N+1):length(wAll)]
w
w[2]<-8:11
as.data.frame(8:11,t(w))
merge.data.frame(8:11,t(w))
merge.data.frame(8:11,w)
w
w$id<-8:11
names(w)<-as.character(8:11)
w
as.character(8:11)
k<-as.character(8:11)
k<-"A"+k
k<-paste0("A ",k)
k
runApp()
runApp()
w
as.data.frame(w)
runApp()
runApp()
w
as.matrix(w)
k
as.matrix(k,w)
as.matrix(k)
k
w
rbind.data.frame(k,w)
runApp()
k
sort(k)
sort(k$w)
k$w
k[order[k]]
k[order[w]]
k[order(w)]
t(k)
t(k)[order(w)]
order(w)
w
k
m<-t(k)
m
names(m)<-c("P","S")
m
runApp()
runApp()
runApp()
w
data.frame(w)
w
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
start
end
Vertices
m
v
v
k
k
apply(k, 1 sum)
apply(k, 1, sum)
w
length(k)
runApp()
k
length(k)
dim(k)
runApp()
w0
k
k
k
shiny::runApp()
runApp()
Vertices
k
w0
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dataTableOutput
runApp()
runApp()
?data.frame
runApp()
?renderDataTable
?formatStyle
runApp()
?renderDataTable
runApp()
runApp()
w
length(w)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
install.packages("dt")
install.packages("DT")
shiny::runApp()
install.packages("visNetwork")
install.packages("DT", dependencies = FALSE)
runApp()
install.packages("plotly", dependencies = FALSE)
shiny::runApp()
install.packages("plotly")
shiny::runApp()
install.packages("plotly", dependencies = FALSE)
runApp()
`dataset` = read.csv('C:/Users/kam/REditorWrapper_4b6462ec-cf13-4bb7-94fb-5a1b7fcb394e/input_df_1f947db6-61ee-4868-b71e-4e13a5c039e4.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
library(visNetwork)
ds<-`dataset`
ds
ds$Id
ds<-`dataset`
nodes<-data.frame(id = ds$Id,
label = ds$Title
)
edges<-data.frame(from = ds$Id, to = ds$`Parent NodeId`)
graph <- visNetwork(nodes, edges) %>%
visHierarchicalLayout()%>% #to get tree structure
visOptions(highlightNearest = list(enabled = TRUE, algorithm = "hierarchical",
degree = list(from = 0, to = 1))
#nodesIdSelection = TRUE
) %>%
visInteraction(keyboard = TRUE,
dragNodes = T,
dragView = T,
zoomView = T) %>%
visEvents(select = "function(properties){
Shiny.onInputChange('selectedNode', properties.nodes);
;}"
)
graph
`dataset` = read.csv('C:/Users/kam/REditorWrapper_4b6462ec-cf13-4bb7-94fb-5a1b7fcb394e/input_df_1f947db6-61ee-4868-b71e-4e13a5c039e4.csv', check.names = FALSE, encoding = "UTF-8", blank.lines.skip = FALSE);
library(visNetwork)
ds<-`dataset`
nodes<-data.frame(id = ds$Id,
label = ds$Title
)
edges<-data.frame(from = ds$`Parent NodeId`, to = ds$Id)
graph <- visNetwork(nodes, edges) %>%
visHierarchicalLayout()%>% #to get tree structure
visOptions(highlightNearest = list(enabled = TRUE, algorithm = "hierarchical",
degree = list(from = 0, to = 1))
#nodesIdSelection = TRUE
) %>%
visInteraction(keyboard = TRUE,
dragNodes = T,
dragView = T,
zoomView = T) %>%
visEvents(select = "function(properties){
Shiny.onInputChange('selectedNode', properties.nodes);
;}"
)
graph
nodes
install.packages("collapsibleTree", dependencies = FALSE)
library(dplyr)
install.packages("data.tree")
install.packages("collapsibleTree")
library(dplyr)
install.packages("collapsibleTree")
library(collapsibleTree)
install.packages("collapsibleTree")
install.packages("data.tree")
install.packages("collapsibleTree")
install.packages("data.tree")
install.packages("collapsibleTree")
